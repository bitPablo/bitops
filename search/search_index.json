{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bitops Bitops is an opinionated deployment tool that bundles supported devops tools along with a built in understanding of an operations repository structure . The combination of these two things makes it easy to automate the provisionning and configuration of cloud infrastructure from basic VMs to complex kubernetes deployments. Features Configurable : Configure how you want bitops to deploy your application with environment variables or yaml Event Hooks : If bitops doesn't have built-in support for your usecase, execute arbitrary bash scripts at different points in bitops' lifecycle. Pipeline Agnostic: By bundling all logic in bitops, you can have the same experience regardless of which pipeline service runs your CI. You can even run bitops locally! How it works Bitops is a boiler plate docker image for DevOps work. An operations repository is mounted to a bitops image's /opt/bitops_deployment directory. Bitops will Auto-detect any configuration belonging to one of its supported tools Loop through each tool and Run any pre-execute hooks Read in yml configuration Execute the tool Run any post-execute hooks Run BitOps Bitops is packaged as a docker image and is available on dockerhub . docker pull bitovi/bitops cd $YOUR_OPERATIONS_REPO docker run bitovi/bitops -v .:/opt/bitops_deployment Configure Bitops Bitops is configured in 3 steps: Select your environment Configure aceess to your cloud provider Configure how you want your deployment tools to execute Docs Supported Tools Provision infrastructure with CloudFormation Provision infrastructure with Terraform Configure infrastructure with Ansible Deploy to kubernetes with Helm Supported Cloud Providers Amazon Web Services (AWS) Microsoft Azure Cloud (Azure) - TODO Google Cloud Engine (GCE) - TODO Support / Contributing We welcome any contributions from the community with open arms. Take a look at our Contributing guide. Come hangout with us on Slack ! Release History See Releases . License MIT License .","title":"Home"},{"location":"#bitops","text":"Bitops is an opinionated deployment tool that bundles supported devops tools along with a built in understanding of an operations repository structure . The combination of these two things makes it easy to automate the provisionning and configuration of cloud infrastructure from basic VMs to complex kubernetes deployments.","title":"Bitops"},{"location":"#features","text":"Configurable : Configure how you want bitops to deploy your application with environment variables or yaml Event Hooks : If bitops doesn't have built-in support for your usecase, execute arbitrary bash scripts at different points in bitops' lifecycle. Pipeline Agnostic: By bundling all logic in bitops, you can have the same experience regardless of which pipeline service runs your CI. You can even run bitops locally!","title":"Features"},{"location":"#how-it-works","text":"Bitops is a boiler plate docker image for DevOps work. An operations repository is mounted to a bitops image's /opt/bitops_deployment directory. Bitops will Auto-detect any configuration belonging to one of its supported tools Loop through each tool and Run any pre-execute hooks Read in yml configuration Execute the tool Run any post-execute hooks","title":"How it works"},{"location":"#run-bitops","text":"Bitops is packaged as a docker image and is available on dockerhub . docker pull bitovi/bitops cd $YOUR_OPERATIONS_REPO docker run bitovi/bitops -v .:/opt/bitops_deployment","title":"Run BitOps"},{"location":"#configure-bitops","text":"Bitops is configured in 3 steps: Select your environment Configure aceess to your cloud provider Configure how you want your deployment tools to execute Docs","title":"Configure Bitops"},{"location":"#supported-tools","text":"Provision infrastructure with CloudFormation Provision infrastructure with Terraform Configure infrastructure with Ansible Deploy to kubernetes with Helm","title":"Supported Tools"},{"location":"#supported-cloud-providers","text":"Amazon Web Services (AWS) Microsoft Azure Cloud (Azure) - TODO Google Cloud Engine (GCE) - TODO","title":"Supported Cloud Providers"},{"location":"#support-contributing","text":"We welcome any contributions from the community with open arms. Take a look at our Contributing guide. Come hangout with us on Slack !","title":"Support / Contributing"},{"location":"#release-history","text":"See Releases .","title":"Release History"},{"location":"#license","text":"MIT License .","title":"License"},{"location":"configuration-base/","text":"Base Configuration Each deployment tool is traditionally controlled with a set of cli arguments. Instead of defining arguments within your pipeline configuration, they can instead either be defined with environment variables or in a bitops.config.yml file. While the core schema for a bitops.config.yml file is common betwen tools, the specific properties and environment variable equivilants vary from tool to tool. Base Schema All bitops.config.yml files share the following structure $tool cli: {} options: {} $tool - identifies the deployment tool cli - object that contains cli arguments options - object that offers additional control over how a tool executes Common Configuration There are some global configuration options that are shared among all tools and cloud providers in a bitops run. These are set via environment variables environment Environment Variable: ENVIRONMENT default: \"\" required: yes Each bitops run is done against a single environment. This property tells bitops which environment to run. For more information on environments, see Operations Repo Structure . kubeconfig_base64 Environment Variable: KUBECONFIG_BASE64 default: \"\" required: no Base64 encodd .kubeconfig file. Allows deployment tools to interact with a kubernetes cluster debug Environment Variable: DEBUG default: \"\" required: no If true, will enable verbose logging Cloud Providers AWS Tool Configuration Ansible Helm Terraform Cloudformation","title":"Base Configuration"},{"location":"configuration-base/#base-configuration","text":"Each deployment tool is traditionally controlled with a set of cli arguments. Instead of defining arguments within your pipeline configuration, they can instead either be defined with environment variables or in a bitops.config.yml file. While the core schema for a bitops.config.yml file is common betwen tools, the specific properties and environment variable equivilants vary from tool to tool.","title":"Base Configuration"},{"location":"configuration-base/#base-schema","text":"All bitops.config.yml files share the following structure $tool cli: {} options: {} $tool - identifies the deployment tool cli - object that contains cli arguments options - object that offers additional control over how a tool executes","title":"Base Schema"},{"location":"configuration-base/#common-configuration","text":"There are some global configuration options that are shared among all tools and cloud providers in a bitops run. These are set via environment variables","title":"Common Configuration"},{"location":"configuration-base/#environment","text":"Environment Variable: ENVIRONMENT default: \"\" required: yes Each bitops run is done against a single environment. This property tells bitops which environment to run. For more information on environments, see Operations Repo Structure .","title":"environment"},{"location":"configuration-base/#kubeconfig_base64","text":"Environment Variable: KUBECONFIG_BASE64 default: \"\" required: no Base64 encodd .kubeconfig file. Allows deployment tools to interact with a kubernetes cluster","title":"kubeconfig_base64"},{"location":"configuration-base/#debug","text":"Environment Variable: DEBUG default: \"\" required: no If true, will enable verbose logging","title":"debug"},{"location":"configuration-base/#cloud-providers","text":"AWS","title":"Cloud Providers"},{"location":"configuration-base/#tool-configuration","text":"Ansible Helm Terraform Cloudformation","title":"Tool Configuration"},{"location":"default-environment/","text":"Default Environment There are instances where configuration or variables can be shared between environments. Instead of duplicating common files across different environments, the Default environemnt should be used instead.","title":"Default Environment"},{"location":"default-environment/#default-environment","text":"There are instances where configuration or variables can be shared between environments. Instead of duplicating common files across different environments, the Default environemnt should be used instead.","title":"Default Environment"},{"location":"examples/","text":"Examples For complete code samples see https://github.com/bitovi/bitops/docs/examples/ Docker Run Examples Selecting Environment An environment must always be selected docker run -e ENVIRONMENT=\"test-serviceA\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest AWS Config docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest Passing in kubeconfig docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e KUBECONFIG_BASE64=$(cat /tmp/my-kubeconfig | base64) \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest Fetch kubeconfig from eks If you has a cluster arn of arn:aws:eks:us-east-1:111122223333:cluster/my-cluster , you would use the following configuration docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e CLUSTER_NAME=\"my-cluster\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest Force skip over ansible If there is a test-serviceA/ansible/ directory, ansible execution can be skipped with SKIP_DEPLOY_ANSIBLE docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e SKIP_DEPLOY_ANSIBLE=true \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest Force call terraform destroy docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e TERRAFORM_DESTROY=true \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Examples"},{"location":"examples/#examples","text":"For complete code samples see https://github.com/bitovi/bitops/docs/examples/","title":"Examples"},{"location":"examples/#docker-run-examples","text":"","title":"Docker Run Examples"},{"location":"examples/#selecting-environment","text":"An environment must always be selected docker run -e ENVIRONMENT=\"test-serviceA\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Selecting Environment"},{"location":"examples/#aws-config","text":"docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"AWS Config"},{"location":"examples/#passing-in-kubeconfig","text":"docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e KUBECONFIG_BASE64=$(cat /tmp/my-kubeconfig | base64) \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Passing in kubeconfig"},{"location":"examples/#fetch-kubeconfig-from-eks","text":"If you has a cluster arn of arn:aws:eks:us-east-1:111122223333:cluster/my-cluster , you would use the following configuration docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e CLUSTER_NAME=\"my-cluster\" \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Fetch kubeconfig from eks"},{"location":"examples/#force-skip-over-ansible","text":"If there is a test-serviceA/ansible/ directory, ansible execution can be skipped with SKIP_DEPLOY_ANSIBLE docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e SKIP_DEPLOY_ANSIBLE=true \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Force skip over ansible"},{"location":"examples/#force-call-terraform-destroy","text":"docker run -e ENVIRONMENT=\"test-serviceA\" \\ -e AWS_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY> \\ -e AWS_DEFAULT_REGION=\"us-east-1\" \\ -e TERRAFORM_DESTROY=true \\ -v $(pwd):/opt/bitops_deployment \\ bitops:latest","title":"Force call terraform destroy"},{"location":"license/","text":"The MIT License (MIT) Copyright (c) 2020 Bitovi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"lifecycle/","text":"Execution Lifecycle Lifecycle hooks Within each tool directory, you can optionally have a bitops.before-deploy.d/ and/or a bitops.after-deploy.d/ . As shown above, if any shell scripts exist within these directories, bitops will execute them first. This is a useful way to extend the functionality of bitops. A popular usecase we've seen is loading secrets or dynamically editing bitops.config.yml Detailed Execution Flow A single run of Bitops will Copy the contents of /opt/bitops_deployment to a temporary working directory Attempt to setup a cloud provider If a terraform/ directory exists within the selected environment Merge contents with Default environment - TODO Load bitops.config.yml and set environment Select terraform version Run terraform init Select terraform workspace Run terraform plan Run any bitops.before-deploy.d/*.sh scripts - TODO Run terraform apply or terraform destroy Run any bitops.after-deploy.d/*.sh scripts - TODO If a ansible/ directory exists within the selected environment Merge contents with Default environment - TODO Load bitops.config.yml and set environment - TODO Run any bitops.before-deploy.d/*.sh scripts - TODO Run ansible-playbook $playbook for each *.yaml or *.yml file in $env/ansible/ Run any bitops.after-deploy.d/*.sh scripts - TODO If a helm/ directory exists within the selected environment Run the following for $env/helm/$ENVIRONMENT_HELM_SUBDIRECTORY/ or for all charts in $env/helm/ Load bitops.config.yml and set environment Use $KUBE_CONFIG_PATH if defined, if not use aws cli to build .kubeconfig Run any bitops.before-deploy.d/*.sh scripts - TODO Merge contents with Default environment Gather all values files - TODO document Run helm dep up Run helm upgrade or helm install Run helm rollback on failure Run any bitops.after-deploy.d/*.sh scripts TODO helm_install_external_charts and helm_install_charts_from_s3 never run! If a cloudformation/ directory exists within the selected environment Merge contents with Default environment - TODO Run any bitops.before-deploy.d/*.sh scripts - TODO Load bitops.config.yml and set environment Run cfn template validation Create or delete cfn stack. Wait for completion Run any bitops.after-deploy.d/*.sh scripts - TODO","title":"Lifecycle"},{"location":"lifecycle/#execution-lifecycle","text":"","title":"Execution Lifecycle"},{"location":"lifecycle/#lifecycle-hooks","text":"Within each tool directory, you can optionally have a bitops.before-deploy.d/ and/or a bitops.after-deploy.d/ . As shown above, if any shell scripts exist within these directories, bitops will execute them first. This is a useful way to extend the functionality of bitops. A popular usecase we've seen is loading secrets or dynamically editing bitops.config.yml","title":"Lifecycle hooks"},{"location":"lifecycle/#detailed-execution-flow","text":"A single run of Bitops will Copy the contents of /opt/bitops_deployment to a temporary working directory Attempt to setup a cloud provider If a terraform/ directory exists within the selected environment Merge contents with Default environment - TODO Load bitops.config.yml and set environment Select terraform version Run terraform init Select terraform workspace Run terraform plan Run any bitops.before-deploy.d/*.sh scripts - TODO Run terraform apply or terraform destroy Run any bitops.after-deploy.d/*.sh scripts - TODO If a ansible/ directory exists within the selected environment Merge contents with Default environment - TODO Load bitops.config.yml and set environment - TODO Run any bitops.before-deploy.d/*.sh scripts - TODO Run ansible-playbook $playbook for each *.yaml or *.yml file in $env/ansible/ Run any bitops.after-deploy.d/*.sh scripts - TODO If a helm/ directory exists within the selected environment Run the following for $env/helm/$ENVIRONMENT_HELM_SUBDIRECTORY/ or for all charts in $env/helm/ Load bitops.config.yml and set environment Use $KUBE_CONFIG_PATH if defined, if not use aws cli to build .kubeconfig Run any bitops.before-deploy.d/*.sh scripts - TODO Merge contents with Default environment Gather all values files - TODO document Run helm dep up Run helm upgrade or helm install Run helm rollback on failure Run any bitops.after-deploy.d/*.sh scripts TODO helm_install_external_charts and helm_install_charts_from_s3 never run! If a cloudformation/ directory exists within the selected environment Merge contents with Default environment - TODO Run any bitops.before-deploy.d/*.sh scripts - TODO Load bitops.config.yml and set environment Run cfn template validation Create or delete cfn stack. Wait for completion Run any bitops.after-deploy.d/*.sh scripts - TODO","title":"Detailed Execution Flow"},{"location":"operations-repo-structure/","text":"Operations Repo Structure Bitops expects an operations repo to be in the following structure \u251c\u2500\u2500 production-serviceA \u2502 \u251c\u2500\u2500 ansible \u2502 \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2502 \u2514\u2500\u2500 bitops.config.yml \u2502 \u251c\u2500\u2500 helm \u2502 \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2502 \u2514\u2500\u2500 bitops.config.yml \u2502 \u2514\u2500\u2500 terraform \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u2514\u2500\u2500 test-serviceA \u251c\u2500\u2500 ansible \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u251c\u2500\u2500 helm \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u2514\u2500\u2500 terraform \u251c\u2500\u2500 bitops.after-deploy.d \u251c\u2500\u2500 bitops.before-deploy.d \u2514\u2500\u2500 bitops.config.yml Environment Directories These directories live at the root of an operations repository and are used to separate applications and environments. TODO Tool directories Within an environment directory are directories grouping supported tools by name. Each of these directories is optional. For example, if your application only requires terraform/ to execute, you do not need an ansible/ or helm/ directory in your environment. This directory is also where you put your infrastructure code for the tool. Lifecycle directories Within a tool directory, you can optionally have a bitops.before-deploy.d/ and/or a bitops.after-deploy.d/ . TODO bitops.config.yml Each tool is traditionally controlled with a set of cli arguements. Instead of defining these cli arguments within your pipeline configuration, these arguements can instead be defined using environment variables or within a bitops.config.yml file. While the core schema for this file is common betwen tools, the specific properties and environment variable equivilants vary from tool to tool. See Bitops Configuration for details.","title":"Operations Repo Structure"},{"location":"operations-repo-structure/#operations-repo-structure","text":"Bitops expects an operations repo to be in the following structure \u251c\u2500\u2500 production-serviceA \u2502 \u251c\u2500\u2500 ansible \u2502 \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2502 \u2514\u2500\u2500 bitops.config.yml \u2502 \u251c\u2500\u2500 helm \u2502 \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2502 \u2514\u2500\u2500 bitops.config.yml \u2502 \u2514\u2500\u2500 terraform \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u2514\u2500\u2500 test-serviceA \u251c\u2500\u2500 ansible \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u251c\u2500\u2500 helm \u2502 \u251c\u2500\u2500 bitops.after-deploy.d \u2502 \u251c\u2500\u2500 bitops.before-deploy.d \u2502 \u2514\u2500\u2500 bitops.config.yml \u2514\u2500\u2500 terraform \u251c\u2500\u2500 bitops.after-deploy.d \u251c\u2500\u2500 bitops.before-deploy.d \u2514\u2500\u2500 bitops.config.yml","title":"Operations Repo Structure"},{"location":"operations-repo-structure/#environment-directories","text":"These directories live at the root of an operations repository and are used to separate applications and environments. TODO","title":"Environment Directories"},{"location":"operations-repo-structure/#tool-directories","text":"Within an environment directory are directories grouping supported tools by name. Each of these directories is optional. For example, if your application only requires terraform/ to execute, you do not need an ansible/ or helm/ directory in your environment. This directory is also where you put your infrastructure code for the tool.","title":"Tool directories"},{"location":"operations-repo-structure/#lifecycle-directories","text":"Within a tool directory, you can optionally have a bitops.before-deploy.d/ and/or a bitops.after-deploy.d/ . TODO","title":"Lifecycle directories"},{"location":"operations-repo-structure/#bitopsconfigyml","text":"Each tool is traditionally controlled with a set of cli arguements. Instead of defining these cli arguments within your pipeline configuration, these arguements can instead be defined using environment variables or within a bitops.config.yml file. While the core schema for this file is common betwen tools, the specific properties and environment variable equivilants vary from tool to tool. See Bitops Configuration for details.","title":"bitops.config.yml"},{"location":"cloud-configuration/configuration-aws/","text":"AWS bitops.config.yml is not yet supported for AWS (https://github.com/bitovi/bitops/issues/15). All configuration must be done with environment variables Configuration aws_access_key_id Bitops Property: TODO Environment Variable: AWS_ACCESS_KEY_ID default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys aws_secret_access_key Bitops Property: TODO Environment Variable: AWS_SECRET_ACCESS_KEY default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys aws_default_region Bitops Property: TODO Environment Variable: AWS_DEFAULT_REGION default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","title":"AWS"},{"location":"cloud-configuration/configuration-aws/#aws","text":"bitops.config.yml is not yet supported for AWS (https://github.com/bitovi/bitops/issues/15). All configuration must be done with environment variables","title":"AWS"},{"location":"cloud-configuration/configuration-aws/#configuration","text":"","title":"Configuration"},{"location":"cloud-configuration/configuration-aws/#aws_access_key_id","text":"Bitops Property: TODO Environment Variable: AWS_ACCESS_KEY_ID default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","title":"aws_access_key_id"},{"location":"cloud-configuration/configuration-aws/#aws_secret_access_key","text":"Bitops Property: TODO Environment Variable: AWS_SECRET_ACCESS_KEY default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","title":"aws_secret_access_key"},{"location":"cloud-configuration/configuration-aws/#aws_default_region","text":"Bitops Property: TODO Environment Variable: AWS_DEFAULT_REGION default: \"\" required: yes AWS Access. See https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","title":"aws_default_region"},{"location":"contributing/DCO/","text":"Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 1 Letterman Drive Suite D4700 San Francisco, CA, 94129 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.","title":"DCO"},{"location":"contributing/contributing/","text":"How to Contribute We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. When you are ready to get started developing, see our development guide for how to get started! Developer Certificate of Origin To contribute to this project, you must agree to the Developer Certificate of Origin (DCO) for each commit you make. The DCO is a simple statement that you, as a contributor, have the legal right to make the contribution. See the DCO file for the full text of what you must agree to. To signify that you agree to the DCO for a commit, you add a line to the git commit message: Signed-off-by: Jane Smith <jane.smith@example.com> In most cases, you can add this signoff to your commit automatically with the -s flag to git commit . You must use your real name and a reachable email address (sorry, no pseudonyms or anonymous contributions). Code reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose.","title":"Contributing Guide"},{"location":"contributing/contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. When you are ready to get started developing, see our development guide for how to get started!","title":"How to Contribute"},{"location":"contributing/contributing/#developer-certificate-of-origin","text":"To contribute to this project, you must agree to the Developer Certificate of Origin (DCO) for each commit you make. The DCO is a simple statement that you, as a contributor, have the legal right to make the contribution. See the DCO file for the full text of what you must agree to. To signify that you agree to the DCO for a commit, you add a line to the git commit message: Signed-off-by: Jane Smith <jane.smith@example.com> In most cases, you can add this signoff to your commit automatically with the -s flag to git commit . You must use your real name and a reachable email address (sorry, no pseudonyms or anonymous contributions). Code reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose.","title":"Developer Certificate of Origin"},{"location":"contributing/development/","text":"Development Guide TODO","title":"Development Guide"},{"location":"contributing/development/#development-guide","text":"TODO","title":"Development Guide"},{"location":"tool-configuration/configuration-ansible/","text":"Ansible Example bitops.config.yml ansible: cli: flush-cache: true force-handlers: true skip-tags: ignore-this-tag forks: 20 inventory: beta tags: run-this-tag options: dryrun: false CLI Configuration flush-cache Bitops Property: flush-cache Environment Variable: BITOS_ANSIBLE_FLUSH_CACHE clear the fact cache for every host in inventory force-handlers Bitops Property: force-handlers Environment Variable: BITOPS_ANSIBLE_FORCE_HANDLERS clear the fact cache for every host in inventory skip-tags Bitops Property: skip-tags Environment Variable: BITOPS_ANSIBLE_SKIP_TAGS only run plays and tasks whose tags do not match these values forks Bitops Property: forks Environment Variable: BITOPS_ANSIBLE_FORKS specify number of parallel processes to use (default=5) inventory Bitops Property: inventory Environment Variable: BITOPS_ANSIBLE_INVENTORY specify inventory host path or comma separated host list. tags Bitops Property: tags Environment Variable: BITOPS_ANSIBLE_TAGS only run plays and tasks tagged with these values Options Configuration dryrun Bitops Property: dryrun Environment Variable: BITOPS_ANSIBLE_DRYRUN default: false Will run --list-tasks but won't actually execute playbook(s) Additional Environment Variable Configuration Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour SKIP_DEPLOY_ANSIBLE Will skill all ansible executions. This superseeds all other configuration","title":"Ansible"},{"location":"tool-configuration/configuration-ansible/#ansible","text":"","title":"Ansible"},{"location":"tool-configuration/configuration-ansible/#example-bitopsconfigyml","text":"ansible: cli: flush-cache: true force-handlers: true skip-tags: ignore-this-tag forks: 20 inventory: beta tags: run-this-tag options: dryrun: false","title":"Example bitops.config.yml"},{"location":"tool-configuration/configuration-ansible/#cli-configuration","text":"","title":"CLI Configuration"},{"location":"tool-configuration/configuration-ansible/#flush-cache","text":"Bitops Property: flush-cache Environment Variable: BITOS_ANSIBLE_FLUSH_CACHE clear the fact cache for every host in inventory","title":"flush-cache"},{"location":"tool-configuration/configuration-ansible/#force-handlers","text":"Bitops Property: force-handlers Environment Variable: BITOPS_ANSIBLE_FORCE_HANDLERS clear the fact cache for every host in inventory","title":"force-handlers"},{"location":"tool-configuration/configuration-ansible/#skip-tags","text":"Bitops Property: skip-tags Environment Variable: BITOPS_ANSIBLE_SKIP_TAGS only run plays and tasks whose tags do not match these values","title":"skip-tags"},{"location":"tool-configuration/configuration-ansible/#forks","text":"Bitops Property: forks Environment Variable: BITOPS_ANSIBLE_FORKS specify number of parallel processes to use (default=5)","title":"forks"},{"location":"tool-configuration/configuration-ansible/#inventory","text":"Bitops Property: inventory Environment Variable: BITOPS_ANSIBLE_INVENTORY specify inventory host path or comma separated host list.","title":"inventory"},{"location":"tool-configuration/configuration-ansible/#tags","text":"Bitops Property: tags Environment Variable: BITOPS_ANSIBLE_TAGS only run plays and tasks tagged with these values","title":"tags"},{"location":"tool-configuration/configuration-ansible/#options-configuration","text":"","title":"Options Configuration"},{"location":"tool-configuration/configuration-ansible/#dryrun","text":"Bitops Property: dryrun Environment Variable: BITOPS_ANSIBLE_DRYRUN default: false Will run --list-tasks but won't actually execute playbook(s)","title":"dryrun"},{"location":"tool-configuration/configuration-ansible/#additional-environment-variable-configuration","text":"Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour","title":"Additional Environment Variable Configuration"},{"location":"tool-configuration/configuration-ansible/#skip_deploy_ansible","text":"Will skill all ansible executions. This superseeds all other configuration","title":"SKIP_DEPLOY_ANSIBLE"},{"location":"tool-configuration/configuration-cloudformation/","text":"Cloudformation Example bitops.config.yml cloudformation: cli: validate-cfn: true cfn-stack-action: deploy options: cfn-stack-name: bitops-edgelambda-test capabilities: CAPABILITY_NAMED_IAM cfn-files: template-file: template.yaml parameters: enabled: true template-param-file: parameters.json CLI Configuration validate-cfn Bitops Property: validate-cfn Environment Variable: CFN_TEMPLATE_VALIDATION default: true Calls aws cloudformation validate-template cfn-stack-action Bitops Property: cfn-stack-action Environment Variable: CFN_STACK_ACTION default: deploy Controls what cloudformation action to apply on the stack Options Configuration cfn-stack-action Bitops Property: cfn-stack-name Environment Variable: CFN_STACK_NAME default: \"\" Cloudformation stack name cfn-stack-action Bitops Property: cfn-stack-name Environment Variable: CFN_STACK_NAME default: \"\" Cloudformation stack name capabilities Bitops Property: capabilities Environment Variable: CFN_CAPABILITY default: \"\" Cloudformation capabilities cfn-files Bitops Property: cfn-files Allows for param files to be used. Has the following child-properties template-file Bitops Property: cfn-files.template-file Template file to apply the params against parameters Bitops Property: cfn-files.parameters Additional parameters. enabled Bitops Property: cfn-files.parameters.enabled Environment Variable: CFN_PARAMS_FLAG default: true template-param-file Bitops Property: cfn-files.parameters.template-param-file Environment Variable: CFN_TEMPLATE_PARAMS_FILENAME default: \"\" Additional Environment Variable Configuration Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour SKIP_DEPLOY_CLOUDFORMATION Will skill all cloudformation executions. This superseeds all other configuration","title":"Cloudformation"},{"location":"tool-configuration/configuration-cloudformation/#cloudformation","text":"","title":"Cloudformation"},{"location":"tool-configuration/configuration-cloudformation/#example-bitopsconfigyml","text":"cloudformation: cli: validate-cfn: true cfn-stack-action: deploy options: cfn-stack-name: bitops-edgelambda-test capabilities: CAPABILITY_NAMED_IAM cfn-files: template-file: template.yaml parameters: enabled: true template-param-file: parameters.json","title":"Example bitops.config.yml"},{"location":"tool-configuration/configuration-cloudformation/#cli-configuration","text":"","title":"CLI Configuration"},{"location":"tool-configuration/configuration-cloudformation/#validate-cfn","text":"Bitops Property: validate-cfn Environment Variable: CFN_TEMPLATE_VALIDATION default: true Calls aws cloudformation validate-template","title":"validate-cfn"},{"location":"tool-configuration/configuration-cloudformation/#cfn-stack-action","text":"Bitops Property: cfn-stack-action Environment Variable: CFN_STACK_ACTION default: deploy Controls what cloudformation action to apply on the stack","title":"cfn-stack-action"},{"location":"tool-configuration/configuration-cloudformation/#options-configuration","text":"","title":"Options Configuration"},{"location":"tool-configuration/configuration-cloudformation/#cfn-stack-action_1","text":"Bitops Property: cfn-stack-name Environment Variable: CFN_STACK_NAME default: \"\" Cloudformation stack name","title":"cfn-stack-action"},{"location":"tool-configuration/configuration-cloudformation/#cfn-stack-action_2","text":"Bitops Property: cfn-stack-name Environment Variable: CFN_STACK_NAME default: \"\" Cloudformation stack name","title":"cfn-stack-action"},{"location":"tool-configuration/configuration-cloudformation/#capabilities","text":"Bitops Property: capabilities Environment Variable: CFN_CAPABILITY default: \"\" Cloudformation capabilities","title":"capabilities"},{"location":"tool-configuration/configuration-cloudformation/#cfn-files","text":"Bitops Property: cfn-files Allows for param files to be used. Has the following child-properties","title":"cfn-files"},{"location":"tool-configuration/configuration-cloudformation/#template-file","text":"Bitops Property: cfn-files.template-file Template file to apply the params against","title":"template-file"},{"location":"tool-configuration/configuration-cloudformation/#parameters","text":"Bitops Property: cfn-files.parameters Additional parameters.","title":"parameters"},{"location":"tool-configuration/configuration-cloudformation/#enabled","text":"Bitops Property: cfn-files.parameters.enabled Environment Variable: CFN_PARAMS_FLAG default: true","title":"enabled"},{"location":"tool-configuration/configuration-cloudformation/#template-param-file","text":"Bitops Property: cfn-files.parameters.template-param-file Environment Variable: CFN_TEMPLATE_PARAMS_FILENAME default: \"\"","title":"template-param-file"},{"location":"tool-configuration/configuration-cloudformation/#additional-environment-variable-configuration","text":"Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour","title":"Additional Environment Variable Configuration"},{"location":"tool-configuration/configuration-cloudformation/#skip_deploy_cloudformation","text":"Will skill all cloudformation executions. This superseeds all other configuration","title":"SKIP_DEPLOY_CLOUDFORMATION"},{"location":"tool-configuration/configuration-helm/","text":"Helm Example bitops.config.yml helm: cli: namespace: bitops timeout: 60s set: key1: value1 debug: false atomic: true force: true dry-run: true options: skip-deploy: false release-name: bitops-release kubeconfig: path: ./path/to/kubeconfig fetch: enabled: true cluster-name: my-cluster plugins: CLI Configuration namespace Bitops Property: namespace Environment Variable: NAMESPACE default: \"\" required: yes namespace scope for this request timeout Bitops Property: timeout Environment Variable: TIMEOUT default: \"500s\" time to wait for any individual Kubernetes operation (like Jobs for hooks) set Bitops Property: set Environment Variable: HELM_SET_FLAG default: {} key/value pairs to pass in to helm via --set debug Bitops Property: debug Environment Variable: HELM_DEBUG default: \"\" enable verbose helm output atomic Bitops Property: atomic Environment Variable: TODO default: \"\" if set, the installation process deletes the installation on failure force Bitops Property: force Environment Variable: TODO default: \"\" sets helm's --force flag dry-run Bitops Property: dry-run Environment Variable: TODO default: \"\" simulate an install Options Configuration skip-deploy Bitops Property: skip-deploy Environment Variable: SKIP_DEPLOY default: \"\" will skip helm execution release-name Bitops Property: release-name Environment Variable: HELM_RELEASE_NAME default: \"\" sets helm release name kubeconfig Bitops Property: kubeconfig configure cluster access. Has the following child-properties. Should provide one of path or fetch . Defaults to fetch path Bitops Property: kubeconfig.path Environment Variable: KUBE_CONFIG_PATH default: \"\" relative file path to .kubeconfig file fetch Bitops Property: kubeconfig.fetch fetch kubeconfig using cloud provider auth enabled Bitops Property: kubeconfig.fetch.enabled Environment Variable: FETCH_KUBECONFIG default: true enables/disables kubeconfig.fetch cluster-name Bitops Property: kubeconfig.fetch.cluster-name Environment Variable: CLUSTER_NAME default: \"\" cloud kubernetes cluster name for kubeconfig fetching. Plugin Configuration This section of bitops.config.yml is unique to helm and allows the customization of helm plugins S3 Plugin Bitops Property: s3 Configure https://github.com/hypnoglow/helm-s3 with the following properties region Bitops Property: s3.region Environment Variable: HELM_PLUGIN_S3_REGION AWS region bucket Bitops Property: s3.bucket Environment Variable: HELM_CHARTS_S3_BUCKET AWS s3 bucket Additional Environment Variable Configuration Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour SKIP_DEPLOY_HELM Will skill all helm executions. This superseeds all other configuration","title":"Helm"},{"location":"tool-configuration/configuration-helm/#helm","text":"","title":"Helm"},{"location":"tool-configuration/configuration-helm/#example-bitopsconfigyml","text":"helm: cli: namespace: bitops timeout: 60s set: key1: value1 debug: false atomic: true force: true dry-run: true options: skip-deploy: false release-name: bitops-release kubeconfig: path: ./path/to/kubeconfig fetch: enabled: true cluster-name: my-cluster plugins:","title":"Example bitops.config.yml"},{"location":"tool-configuration/configuration-helm/#cli-configuration","text":"","title":"CLI Configuration"},{"location":"tool-configuration/configuration-helm/#namespace","text":"Bitops Property: namespace Environment Variable: NAMESPACE default: \"\" required: yes namespace scope for this request","title":"namespace"},{"location":"tool-configuration/configuration-helm/#timeout","text":"Bitops Property: timeout Environment Variable: TIMEOUT default: \"500s\" time to wait for any individual Kubernetes operation (like Jobs for hooks)","title":"timeout"},{"location":"tool-configuration/configuration-helm/#set","text":"Bitops Property: set Environment Variable: HELM_SET_FLAG default: {} key/value pairs to pass in to helm via --set","title":"set"},{"location":"tool-configuration/configuration-helm/#debug","text":"Bitops Property: debug Environment Variable: HELM_DEBUG default: \"\" enable verbose helm output","title":"debug"},{"location":"tool-configuration/configuration-helm/#atomic","text":"Bitops Property: atomic Environment Variable: TODO default: \"\" if set, the installation process deletes the installation on failure","title":"atomic"},{"location":"tool-configuration/configuration-helm/#force","text":"Bitops Property: force Environment Variable: TODO default: \"\" sets helm's --force flag","title":"force"},{"location":"tool-configuration/configuration-helm/#dry-run","text":"Bitops Property: dry-run Environment Variable: TODO default: \"\" simulate an install","title":"dry-run"},{"location":"tool-configuration/configuration-helm/#options-configuration","text":"","title":"Options Configuration"},{"location":"tool-configuration/configuration-helm/#skip-deploy","text":"Bitops Property: skip-deploy Environment Variable: SKIP_DEPLOY default: \"\" will skip helm execution","title":"skip-deploy"},{"location":"tool-configuration/configuration-helm/#release-name","text":"Bitops Property: release-name Environment Variable: HELM_RELEASE_NAME default: \"\" sets helm release name","title":"release-name"},{"location":"tool-configuration/configuration-helm/#kubeconfig","text":"Bitops Property: kubeconfig configure cluster access. Has the following child-properties. Should provide one of path or fetch . Defaults to fetch","title":"kubeconfig"},{"location":"tool-configuration/configuration-helm/#path","text":"Bitops Property: kubeconfig.path Environment Variable: KUBE_CONFIG_PATH default: \"\" relative file path to .kubeconfig file","title":"path"},{"location":"tool-configuration/configuration-helm/#fetch","text":"Bitops Property: kubeconfig.fetch fetch kubeconfig using cloud provider auth","title":"fetch"},{"location":"tool-configuration/configuration-helm/#enabled","text":"Bitops Property: kubeconfig.fetch.enabled Environment Variable: FETCH_KUBECONFIG default: true enables/disables kubeconfig.fetch","title":"enabled"},{"location":"tool-configuration/configuration-helm/#cluster-name","text":"Bitops Property: kubeconfig.fetch.cluster-name Environment Variable: CLUSTER_NAME default: \"\" cloud kubernetes cluster name for kubeconfig fetching.","title":"cluster-name"},{"location":"tool-configuration/configuration-helm/#plugin-configuration","text":"This section of bitops.config.yml is unique to helm and allows the customization of helm plugins","title":"Plugin Configuration"},{"location":"tool-configuration/configuration-helm/#s3-plugin","text":"Bitops Property: s3 Configure https://github.com/hypnoglow/helm-s3 with the following properties","title":"S3 Plugin"},{"location":"tool-configuration/configuration-helm/#region","text":"Bitops Property: s3.region Environment Variable: HELM_PLUGIN_S3_REGION AWS region","title":"region"},{"location":"tool-configuration/configuration-helm/#bucket","text":"Bitops Property: s3.bucket Environment Variable: HELM_CHARTS_S3_BUCKET AWS s3 bucket","title":"bucket"},{"location":"tool-configuration/configuration-helm/#additional-environment-variable-configuration","text":"Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour","title":"Additional Environment Variable Configuration"},{"location":"tool-configuration/configuration-helm/#skip_deploy_helm","text":"Will skill all helm executions. This superseeds all other configuration","title":"SKIP_DEPLOY_HELM"},{"location":"tool-configuration/configuration-terraform/","text":"Terraform Terraform will always run terraform init and terraform plan on every execution. Example bitops.config.yml terraform: cli: var-file: my-vars.tfvars target: terraform.module.resource options: command: apply version: \"0.13.2\" workspace: test CLI Configuration var-file Bitops Property: var-file CLI Argument: --var-file Environment Variable: TF_VAR_FILE default: \"\" target Bitops Property: target CLI Argument: --target Environment Variable: TF_TARGET default: \"\" Options Configuration version Bitops Property: version Environment Variable: TERRAFORM_VERSION default: \"0.12.29\" Allows customziation of which version of terraform to run command Bitops Property: command Environment Variable: TERRAFORM_COMMAND default: \"plan\" Controls what terraform command to run. e.g. apply , destroy , etc. workspace Bitops Property: workspace Environment Variable: TERRAFORM_WORKSPACE default: \"\" Will select a terraform workspace using terraform workspace new $TERRAFORM_WORKSPACE || terraform workspace select $TERRAFORM_WORKSPACE prior to running other terraform commands. Additional Environment Variable Configuration Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour SKIP_DEPLOY_TERRAFORM Will skill all terraform executions. This superseeds all other configuration TERRAFORM_APPLY Will force call terraform apply TERRAFORM_DESTROY Will force call terraform destroy","title":"Terraform"},{"location":"tool-configuration/configuration-terraform/#terraform","text":"Terraform will always run terraform init and terraform plan on every execution.","title":"Terraform"},{"location":"tool-configuration/configuration-terraform/#example-bitopsconfigyml","text":"terraform: cli: var-file: my-vars.tfvars target: terraform.module.resource options: command: apply version: \"0.13.2\" workspace: test","title":"Example bitops.config.yml"},{"location":"tool-configuration/configuration-terraform/#cli-configuration","text":"","title":"CLI Configuration"},{"location":"tool-configuration/configuration-terraform/#var-file","text":"Bitops Property: var-file CLI Argument: --var-file Environment Variable: TF_VAR_FILE","title":"var-file"},{"location":"tool-configuration/configuration-terraform/#default","text":"","title":"default: \"\""},{"location":"tool-configuration/configuration-terraform/#target","text":"Bitops Property: target CLI Argument: --target Environment Variable: TF_TARGET","title":"target"},{"location":"tool-configuration/configuration-terraform/#default_1","text":"","title":"default: \"\""},{"location":"tool-configuration/configuration-terraform/#options-configuration","text":"","title":"Options Configuration"},{"location":"tool-configuration/configuration-terraform/#version","text":"Bitops Property: version Environment Variable: TERRAFORM_VERSION default: \"0.12.29\" Allows customziation of which version of terraform to run","title":"version"},{"location":"tool-configuration/configuration-terraform/#command","text":"Bitops Property: command Environment Variable: TERRAFORM_COMMAND default: \"plan\" Controls what terraform command to run. e.g. apply , destroy , etc.","title":"command"},{"location":"tool-configuration/configuration-terraform/#workspace","text":"Bitops Property: workspace Environment Variable: TERRAFORM_WORKSPACE default: \"\" Will select a terraform workspace using terraform workspace new $TERRAFORM_WORKSPACE || terraform workspace select $TERRAFORM_WORKSPACE prior to running other terraform commands.","title":"workspace"},{"location":"tool-configuration/configuration-terraform/#additional-environment-variable-configuration","text":"Although not captured in bitops.config.yml , the following environment variables can be set to further customize behaviour","title":"Additional Environment Variable Configuration"},{"location":"tool-configuration/configuration-terraform/#skip_deploy_terraform","text":"Will skill all terraform executions. This superseeds all other configuration","title":"SKIP_DEPLOY_TERRAFORM"},{"location":"tool-configuration/configuration-terraform/#terraform_apply","text":"Will force call terraform apply","title":"TERRAFORM_APPLY"},{"location":"tool-configuration/configuration-terraform/#terraform_destroy","text":"Will force call terraform destroy","title":"TERRAFORM_DESTROY"}]}